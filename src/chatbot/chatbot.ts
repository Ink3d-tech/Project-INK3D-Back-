/* eslint-disable prefer-const */
import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { VertexAI, GenerativeModel } from '@google-cloud/vertexai';
import * as dotenv from 'dotenv';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../entities/user.entity';

dotenv.config();

@WebSocketGateway({ cors: { origin: '*' } })
export class Chatbot {
  @WebSocketServer()
  server: Server;

  private model: GenerativeModel;

  constructor(
    @InjectRepository(User) private readonly userRepository: Repository<User>,
  ) {
    const vertexAI = new VertexAI({
      project: process.env.GOOGLE_CLOUD_PROJECT_ID,
      location: process.env.GOOGLE_CLOUD_REGION,
    });

    this.model = vertexAI.getGenerativeModel({ model: 'gemini-pro' });
  }

  private readonly systemContext = `
  Eres un chatbot llamdado INK3D, eres amigable y experto en un ecommerce basado en al web de INK3D, una tienda en l√≠nea especializada en moda asi√°tica.
  La pagina tambien cuenta con una secci√≥n para magazine donde se publican las ultimas tendencias de la moda y se puede interactuar en el chat. 
  Tu objetivo es ayudar a los usuarios con informaci√≥n relevante y concreta.

  üìç **Informaci√≥n de INK3D**:
  - üõçÔ∏è Cat√°logo: Moda asi√°tica, ropa, accesorios y m√°s.
  - üìñ Revista: √öltimas tendencias y consejos de moda.
  - üöö Env√≠os: Internacionales y nacionales con entrega en 3-7 d√≠as h√°biles.

  **Reglas del chatbot:**
  1Ô∏è‚É£ Responde de manera **breve y clara** (m√°ximo 2-3 oraciones).
  2Ô∏è‚É£ Si el usuario pregunta sobre productos, recomi√©ndale visitar el cat√°logo en el sitio web.
  3Ô∏è‚É£ Si el usuario pregunta sobre la revista, env√≠ale el enlace directo.
  4Ô∏è‚É£ Si no sabes la respuesta, di: "Puedes contactarnos para m√°s informaci√≥n."
  `;

  @SubscribeMessage('message')
  async handleMessage(
    @MessageBody()
    data: {
      userMessage: string;
      userId?: number;
      conversationHistory?: { text: string; sender: string }[];
    },
    @ConnectedSocket() socket: Socket,
  ): Promise<void> {
    try {
      let userName = 'Usuario';

      if (data.userId) {
        const user = await this.userRepository.findOne({
          where: { id: data.userId as any },
        });
        if (user) {
          userName = user.name;
        }
      }

      const recentHistory =
        data.conversationHistory
          ?.slice(-5)
          .map(
            (msg) =>
              `${msg.sender === 'bot' ? 'Chatbot' : userName}: ${msg.text}`,
          )
          .join('\n') || '';

      const prompt = `
        ${this.systemContext}
        === Historial de conversaci√≥n ===
        ${recentHistory}

        ${userName}: ${data.userMessage}
        Chatbot:`;

      const result = await this.model.generateContent({
        contents: [{ role: 'user', parts: [{ text: prompt }] }],
      });

      const response = await result.response;
      let botResponse =
        response?.candidates?.[0]?.content?.parts?.[0]?.text ||
        'Lo siento, no entend√≠ tu pregunta. ¬øPodr√≠as reformularla?';

      this.server.to(socket.id).emit('bot-response', { text: botResponse });
    } catch (error) {
      console.error('Error al comunicarse con Gemini:', error);
      this.server.to(socket.id).emit('bot-response', {
        text: 'Lo siento, ocurri√≥ un problema t√©cnico.',
      });
    }
  }
}
